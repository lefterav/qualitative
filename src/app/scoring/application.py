'''
Created on Aug 17, 2017

@author: lefterav
'''

class Baseline(object):
    '''
    Class that encapsulates the basic characteristics of a baseline scoring model,
    including a the preprocessors, a list of feature names and feature generators, 
    a scaler and the quality estimation model
    '''

    def __init__(self):
        '''
        Initialize a new baseline model
        '''
        #=======================================================================
        # number of tokens in the source sentence
        # number of tokens in the target sentence
        # average source token length
        # LM probability of source sentence
        # LM probability of target sentence
        # number of occurrences of the target word within the target hypothesis (averaged for all words in the hypothesis - type/token ratio)
        # average number of translations per source word in the sentence (as given by IBM 1 table thresholded such that prob(t|s) > 0.2)
        # average number of translations per source word in the sentence (as given by IBM 1 table thresholded such that prob(t|s) > 0.01) weighted by the inverse frequency of each word in the source corpus
        # percentage of unigrams in quartile 1 of frequency (lower frequency words) in a corpus of the source language (SMT training corpus)
        # percentage of unigrams in quartile 4 of frequency (higher frequency words) in a corpus of the source language
        # percentage of bigrams in quartile 1 of frequency of source words in a corpus of the source language
        # percentage of bigrams in quartile 4 of frequency of source words in a corpus of the source language
        # percentage of trigrams in quartile 1 of frequency of source words in a corpus of the source language
        # percentage of trigrams in quartile 4 of frequency of source words in a corpus of the source language
        # percentage of unigrams in the source sentence seen in a corpus (SMT training corpus)
        # number of punctuation marks in the source sentence
        # number of punctuation marks in the target sentence
        #=======================================================================
        
        #TODO: find the feature names of qualitative that correspond to the quest features above
        self.featurenames = []
        
        #TODO: add preprocessors
        self.preprocessors = []
        
        #TODO: replace featuregenerators with autogenerated list of generators given featurenames
        self.featuregenerators = []
        
        # preload an empty model
        self.model = None
        
     
    def load_regressor(self, regressor):
        '''
        Load a scikit-learn regressor model ready to produce a score
        given a list of feature values 
        @param regressor: a scikit-learn-compatible regressor
        @type regressor: sklearn.base.RegressorMixin
        
        '''
        self.model = regressor
        
    def load_scaler(self, scaler):
        '''
        Load a scikit-learn scaler in order to scale test data the
        same way as the training data
        @param scaler: a scikit-learn-compatible scaler
        @type scaler: sklearn.preprocessing.StandardScaler or similar
        '''
        self.scaler = scaler
    
    def preprocess(self, parallelsentence):
        '''
        Preprocess the parallel sentence and add annotation
        @param parallelsentence: the Parallel Sentence to be processed
        @type parallelsentence: sentence.parallelsentence.ParallelSentence
        @return: the processed parallel sentence
        @rtype: sentence.parallelsentence.ParallelSentence
        '''
        for preprocessor in self.preprocessors:
            parallelsentence = preprocessor.add_features_parallelsentence(parallelsentence)
        
        for featuregenerator in self.featuregenerators:
            parallelsentence = featuregenerator.add_features_parallelsentence(parallelsentence)
        return parallelsentence
           
    def score(self, parallelsentence):
        '''
        Provide an estimated quality score for the given parallelsentence:
        @param parallelsentence: the parallelsentence to be scored
        @type parallelsentence: sentence.parallelsentec.ParallelSentence
        @return: a quality score for the given sentence
        @rtype: float
        '''
        parallelsentence = self.preprocess(parallelsentence)
        featurevector = parallelsentence.get_nested_featurevector(self.featurenames)
        featurevector = self.scaler.transform(featurevector)
        score = self.model.score(featurevector)
        return score