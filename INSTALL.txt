In order to run the program please follow the steps:

0. Add the /src directory into the PYTHONPATH of your linux 
   Debian/Ubuntu: export PYTHONPATH = $PYTHONPATH:/home/<dirname>/qualitative/src
1. Install python requirements and external programs (see below)
2. Change directory to /lib and run "bash install.sh" to download Java libraries
3. Download linguistic resources (suggested folder in /res; there may be a bash script to do that)
4. Specify the location of the linguistic resources to the configuration files
5. To test installation run src/app/autoranking/application.py <classifier_file> <annotation.config.1> [<annotation.config.2> ...]


============
Requirements
============

This is a list of the requirements for running the suite. Please scroll
for more hints on their installation

For Debian/ubuntu:

#install java
sudo apt-add-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk


#install python libraries

sudo apt-get install python-dev g++ build-essential python-pip libblas-dev liblapack-dev gfortran

sudo pip install --upgrade pip 
 
[For the following commands consider
(a) user-specific installation (no root or 
not wanting to risk your python environment) 
add the parameter --user
 pip install --user <package-name> 
(b) use venv to create a python virtual environment

pip install setuptools
pip install nltk==2.0.5
easy_install -U distribute
pip install -r requirements.txt
pip install https://github.com/kpu/kenlm/archive/master.zip 


Additionally
* expsuite [only for training] (Manually from https://github.com/lefterav/expsuite)

external programs [need to start separately]
* lmserver wrapped over SRILM [replaced by KenLM]
* Acrolinx IQ [proprietary-optional]


===========
Libraries
===========

jar files (automatically fetched by "cd lib; bash install.sh")
* py4j
* Berkeley parser
* Meteor
* Language tool 

other resources (automatically fetched by "cd res; bash download.sh":
* language model for source and target language (ARPA format)
* trained grammar for Berkeley parser (source and target language)
* truecaser model for source and target language (see Moses)
* pre-trained quality estimation ranking model

